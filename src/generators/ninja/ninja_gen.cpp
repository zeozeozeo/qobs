#include "ninja_gen.hpp"
#include "../../utils.hpp"
#include <stdlib.h>

#include <spdlog/spdlog.h>
using namespace spdlog;

const std::filesystem::path QOBS_FILES_DIR = "QobsFiles";

void NinjaGenerator::write(std::string_view code) {
    m_code += code;
}

void NinjaGenerator::writeln(std::string_view code) {
    write(code);
    write("\n");
}

inline std::string escape_path(std::filesystem::path path) {
    auto str = utils::replace(path.string(), ":", "$:");
    utils::replace_in_place(str, " ", "$ ");
    return str;
}

void NinjaGenerator::generate(const Manifest& manifest,
                              const std::vector<BuildFile>& files,
                              std::string_view exe_name,
                              std::string_view compiler) {
    writeln("# This file is automatically @generated by Qobs: DO NOT EDIT!");
    writeln("ninja_required_version = 1.1");

    // write variables
    write("cflags = ");
    writeln(manifest.target().cflags());
    write("ldflags = ");
    writeln(manifest.target().ldflags());
    write("cc = ");
    writeln(compiler);

    // write rules
    writeln("\n# rules");
    writeln("rule cc");
    writeln("  command = $cc $cflags -c $in -o $out");
    writeln("  description = CC $out");

    writeln("rule link");
    writeln("  command = $cc $ldflags -o $out $in");
    writeln("  description = LINK $out");

    // obj_dir will be the directory where build files where go, e.g.
    // `QobsFiles/packagedir.dir`
    auto obj_dir = QOBS_FILES_DIR / (manifest.package().name() + ".dir");

    // get object path, e.g.: src/main.cpp turns into
    // QobsFiles/packagename.dir/src/main.cpp.obj
    auto get_obj_path = [&](std::filesystem::path path) {
        return escape_path(obj_dir / std::filesystem::relative(
                                         path, manifest.package_root())) +
               ".obj";
    };

    // compile
    writeln("\n# compile source files");
    for (auto& file : files) {
        writeln(fmt::format("build {}: cc {}", get_obj_path(file.path()),
                            escape_path(file.path())));
    }

    // link
    writeln(fmt::format("\n# link the executable `{}`", exe_name));
    write(fmt::format("build {}: link", exe_name));
    for (auto& file : files) {
        write(" ");
        write(get_obj_path(file.path()));
    }

    // set variables for link
    writeln();
}

void NinjaGenerator::invoke(std::filesystem::path path) {
    auto cwd = path.parent_path();
    trace("invoking ninja in `{}`", cwd.string());

    // TODO: make this use `utils::popen`
    system(fmt::format("ninja -C \"{}\" -f \"{}\"", cwd.string(), path.string())
               .c_str());
}
