#include "ninja_gen.hpp"
#include "../../utils.hpp"
#include <fmt/core.h>

void NinjaGenerator::write(std::string code) {
    m_code += code;
}

void NinjaGenerator::writeln(std::string code) {
    write(code);
    write("\n");
}

inline std::string escape_path(std::filesystem::path path) {
    auto str = utils::replace(path.string(), ":", "$:");
    utils::replace_in_place(str, " ", "$ ");
    return str;
}

void NinjaGenerator::generate(const Config& config,
                              const std::vector<BuildFile>& files) {
    writeln("# This file is automatically @generated by Qobs: DO NOT EDIT!");
    writeln("ninja_required_version = 1.1");

    write("cflags = ");
    writeln(config.target().cflags());

    writeln("rule cc");
    writeln("  command = clang $cflags -c $in -o $out");

    // obj_dir will be the directory where build files where go, similar to
    // CMake's `CMakeFiles/qobs.dir`
    std::filesystem::path obj_dir = "QobsFiles";
    obj_dir /= config.package().name() + ".dir";

    for (auto& file : files) {
        // get object path, e.g.: src/main.cpp turns into QobsFiles/src/main.cpp
        // (and eventually gets formatted to QobsFiles/src/main.cpp.obj)
        auto obj_path = obj_dir / std::filesystem::relative(
                                      file.path(), config.package_path());

        writeln(fmt::format("build {}.obj: cc {}", escape_path(obj_path),
                            escape_path(file.path())));
    }
}
